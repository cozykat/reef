<section id="service_subscriptions">
    <title>Service subscriptions</title>
    <para>
        Reef allows clients to subscribe to service events, receiving notifications asynchronously when objects are
        added, modified, or removed. Subscriptions are requested by adding header information to normal service
        requests (typically GETs). The
        <literal>ISession</literal>
        interface handles the details of adding request
        headers and setting up message queues; clients just need to provide a callback object that implements the
        <literal>IEventAcceptor</literal>
        interface. The AMQP connection will route incoming service events to our<literal>IEventAcceptor</literal>. The
        calls arrive on a separate thread, so we will need synchronization code to keep everything thread-safe.
        <example>
            <title>IEventAcceptor with example</title>
            <programlisting><![CDATA[
interface IEventAcceptor<T> {
    public void onEvent(ServiceTypes.Event<T> event);
}

IEventAcceptor<ConfigFile> acceptor = new IEventAcceptor<ConfigFile>() {
    public void onEvent(ServiceTypes.Event<ConfigFile> event) {
        System.out.println("Got event: " + event.getEvent());
        System.out.println("Payload  : " + event.getResult());
    }
};
    ]]></programlisting>
        </example>
    </para>
    <para>
        Once we have an event acceptor ready, we set-up the callback by getting an
        <literal>ISubscription</literal>
        interface from our session. To do this, we need one additional piece of information: the description of the
        message type we're subscribing to. The
        <literal>Descriptors</literal>
        class keeps a list of these. We setup a subscription using the helper function
        <literal>addSession</literal>
        on
        <literal>ISession</literal>. The subscription that is created is not tied to the lifecycle of the creating
        <literal>ISession</literal>, it is only a factory of subscriptions. Subscriptions are tied to the lifecycle of
        underlying<literal>IConnection</literal>. If the connection
        is closed all subscriptions are invalidated and need to be re-setup. When a subscription is no longer needed
        it should be cleaned-up by calling cancel();

        <example>
            <title>Subscription Example</title>
            <programlisting><![CDATA[
ISubscription<ConfigFile> subscription = session.addSubscription(
    Descriptors.configFile(),
    acceptor);

// we'll request all configFiles that have an html mimeType
ConfigFile request = ConfigFile.newBuilder()
  .setMimeType("text/html")
  .build();

// we pass the subscription with the GET request to indicate we want to subscribe to
List<ConfigFile> configFiles = session.get(request, subscription);
// configFiles will have all objects with mime-type "text/html"

ConfigFile deleted = session.deleteOne(configFiles.get(0));
// console -> "Got event: REMOVED"
// console -> "Payload  : {...}"

ConfigFile newConfigFile = ConfigFile.newBuilder()
  .setName("NewFile")
  .setMimeType("text/html")
  .setFile(ByteString.copyFromUtf8("Example config file"))
  .build();
session.putOne(newConfigFile);
// console -> "Got event: ADDED"
// console -> "Payload  : {...}"

subscription.cancel();
    ]]></programlisting>
        </example>
    </para>
</section>