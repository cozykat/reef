<section id="service_subscriptions">
    <title>Service Subscriptions</title>
    <para>
        Reef allows clients to subscribe to <emphasis>service events</emphasis>, which are notifications that objects have been
        added, modified, or removed. Subscriptions are requested by adding header information to normal service
        requests (typically using GET). </para>
        <para>The
        <literal>ISession</literal>
        interface handles the details of adding request
        headers and setting up message queues; clients just need to provide a callback object which implements the
        <literal>IEventAcceptor</literal>
        interface. The connection manager will route incoming service events to the registered callbacks.
        <example>
            <title>IEventAcceptor with example</title>
            <programlisting language="java"><![CDATA[
// The IEventAcceptor interface, parameterized on service type
interface IEventAcceptor<T> {

    // The callback clients need to implement
    public void onEvent(ServiceTypes.Event<T> event);
}

(...)

// A simple implementation that prints service events to the console
IEventAcceptor<ConfigFile> acceptor = new IEventAcceptor<ConfigFile>() {

    public void onEvent(ServiceTypes.Event<ConfigFile> event) {

        // Event type: ADDED, MODIFIED, REMOVED
        System.out.println("Got event: " + event.getEvent());

        // The service object itself, in this case a ConfigFile
        System.out.println("Payload  : " + event.getResult());

    }
};
    ]]></programlisting>
        </example>
    </para>
    <caution>
            <para>Service event callbacks arrive on a separate thread, so clients will need synchronization code to ensure thread-safety.</para>
        </caution>

    <para>
         Once we have an event acceptor ready, we set up the callback by acquiring an
        <literal>ISubscription</literal>
        interface using the <literal>addSubscription</literal> method on <literal>ISession</literal>. In addition to the event acceptor,
        <literal>addSubscription</literal> takes a <emphasis>message description</emphasis>, which is available from the <literal>Descriptors</literal>
        class. The message description is used by the connection manager to handle the internal details of AMQP.
    </para>
        <para>
            Although sessions are used to acquire subscriptions, the subscription itself is tied to the lifecycle of the connection manager,
            not the session. If the connection is closed all subscriptions will be invalidated. When a subscription is no longer needed, it can
            be released using the <literal>cancel</literal> method.
        </para>
        <example>
            <title>Subscription Example</title>
            <programlisting language="java"><![CDATA[
// Add a subscription for the ConfigFile object by providing an instance of IEventAcceptor<ConfigFile>.
// The return object, ISubscription<ConfigFile>, will be used to register and manage subscription.
ISubscription<ConfigFile> subscription = session.addSubscription(
    Descriptors.configFile(),
    acceptor);

// Build a request for all ConfigFiles that have an html mimeType
ConfigFile request = ConfigFile.newBuilder()
  .setMimeType("text/html")
  .build();

// Pass the subscription with the GET request to indicate we want to set up a subscription.
// The request will also return all current objects that match our request (mime-type "text/html")
List<ConfigFile> configFiles = session.get(request, subscription);

// Delete the first ConfigFile object, causing a REMOVED event
ConfigFile deleted = session.deleteOne(configFiles.get(0));
// console -> "Got event: REMOVED"
// console -> "Payload  : {...}"

// Build a new ConfigFile object with the html mime-type
ConfigFile newConfigFile = ConfigFile.newBuilder()
  .setName("NewFile")
  .setMimeType("text/html")
  .setFile(ByteString.copyFromUtf8("Example config file"))
  .build();

// Create the object, causing an ADDED event
session.putOne(newConfigFile);
// console -> "Got event: ADDED"
// console -> "Payload  : {...}"

// Cancel the subscription
subscription.cancel();
    ]]></programlisting>
        </example>
</section>