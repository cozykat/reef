<section id="service_requests">
    <title>Service Request Basics</title>
    <section>
        <title>Overview</title>
        <para>
            In their most basic form, service requests consist of:
            <itemizedlist>
                <listitem>Creating a request object of a specific type.</listitem>
                <listitem>Making a request with the object, plus one of the RESTful verbs -- GET, PUT, POST, DELETE.
                </listitem>
                <listitem>Receiving a list of results, all of the same object type as the request.</listitem>
            </itemizedlist>
            The ISession interface translates request method calls into service messages:
        </para>
        <figure id="service_request_image">
            <title>Service Request Overview</title>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="images/envelope.png"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>
    <section>
        <title>Queries</title>
        <para>
            When using the GET verb we are using a method often called "query by example". We fill in the parts of the
            object that we know and then ask that the server return us everything that has the same "shape" as our
            example query object. This allows us to be as specific or general we need to be. In general, properties that
            are set
            will be matched against, while properties that are unset will be ignored. Multiple properties specify
            objects that match all the given characteristics (logical "and").
            <example>
                <title>Query for a point with a known name</title>
                <programlisting language="java"><![CDATA[
Point request = Point.newBuilder().setName("Pt01").build();
                ]]></programlisting>
            </example>
            <example>
                <title>Query for all points</title>
                <programlisting language="java"><![CDATA[
// notice "*" is a wildcard matcher
Point request = Point.newBuilder().setName("*").build();
                ]]></programlisting>
            </example>
            <example>
                <title>Query for all points with characteristic "abnormal"</title>
                <programlisting language="java"><![CDATA[
Point request = Point.newBuilder().setAbnormal(true).build();
                ]]></programlisting>
            </example>
        </para>
        <para>
            To complete the request, we invoke the client with the GET verb. By default all requests to the reef service
            take one request object and return a list:
            <example>
                <title>Getting List of Points</title>
                <programlisting language="java"><![CDATA[
List<Point> points = session.get(request);
for (Point point : points) {
    System.out.println("Point uid: " + point.getUid());
    System.out.println("Point name: " + point.getName());
    System.out.println("Point abnormal: " + point.getAbnormal());
}
                ]]></programlisting>
            </example>
        </para>
        <para>
            The same query objects could be used to perform GET or DELETE operations. The protobuf query is really a
            selector that
            specifies one or more nouns which we want to apply the verb on.
        </para>

    </section>
    <section>
        <title>Request Helpers</title>
        <para>
            Sometimes, we can qualify our service requests by making assertions about the form of the response we
            expect. For instance, in the example above in which we searched for a Point by name, we were expecting
            one and only one response object; anything else represents a failure.
            <literal>ISession</literal>
            has a helper function called
            <literal>getOne()</literal>
            that checks that the returned list has exactly one item and returns that item. There are similar helpers
            for the other 3 verbs.
            <example>
                <title>Using ISession xxxOne() helpers</title>
                <programlisting language="java"><![CDATA[
Point request = Point.newBuilder().setName("Pt01").build();

// handling the list manually
List<Point> points = session.get(request);
if(points.size != 1) throw new ExpectationException("Response wrong size");
Point point = points.get(0);

// equivalent to 3 lines above
Point point = session.getOne(request);
                ]]></programlisting>
            </example>
        </para>
    </section>
    <section>
        <title>Error Handling</title>
        <para>
            Service requests may experiance errors. This can be for local reasons (i.e.<emphasis>
            RESPONSE_TIMEOUT</emphasis>) or can
            represent an error raised by the service and tunneled back through the response (i.e.<emphasis>
            BAD_REQUEST</emphasis>,
            <emphasis>NOT_ALLOWED</emphasis>). All service errors are sub-classed from
            <literal>ReefServiceException</literal>
            but more specific types of exceptions are thrown to make exception handling easier.
        </para>
        <example>
            <title>Exception Handling</title>
            <programlisting language="java"><![CDATA[
try {
    Point point = client.getOne(request);
} catch (BadRequestException badRequest) {
    System.out.println("Badly formed request: " + badRequest.getMsg());
} catch (ReefServiceException ex) {
    Envelope.Status status = ex.getStatus();
    String message = ex.getMsg();

    System.out.println("Request failed with status: " + status.toString());
    System.out.println("Message: " + message);
}
           ]]></programlisting>
        </example>
    </section>
</section>