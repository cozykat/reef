<section id="service_lifecycle">
    <title>Create, Update and Delete</title>
    <para>
        So far we've only dealt with requests that ask for the current state of the system. We'll now create and
        manipulate objects using <literal>ISession</literal>.
    </para>
    <para>
        To demonstrate create/update/delete service functionality, we will use <literal>ConfigFile</literal>, one of the simplest objects in Reef.
        <literal>ConfigFile</literal> objects contain generic data that is
        provided by configuration processes and used by applications which understand how to interpret it.
    </para>
    <para>
        First, we'll create a ConfigFile named "config01" that contains a plain-text string and send it to the server
        with the PUT verb. The ConfigFile object returned from the request will be exactly like the one we PUT except
      that it will contain the server-assigned "uid" field filled out with a unique identifier.
        <example>
            <title>Creating a ConfigFile</title>
            <programlisting language="java"><![CDATA[
// Create a ConfigFile with some example text
ConfigFile createRequest = ConfigFile.newBuilder()
        .setName("config01")
        .setMimeType("text/plain")
        .setFile(ByteString.copyFromUtf8("Example config file"))
        .build();

// Put the ConfigFile to the server, receive the created object
ConfigFile created = session.putOne(createRequest);

// The ConfigFile now has a system identifier and is available for further requests
System.out.println("UID: " + created.getUid());
    ]]></programlisting>
        </example>
    </para>
    <para>
        To modify this object we build a request by first copying all fields (including "uid") and then making any changes.
        We use the PUT verb again -- when PUT is used on an already-existing object, the service will update that object rather than
      creating a new one.
        <example>
            <title>Updating a ConfigFile</title>
            <programlisting language="java"><![CDATA[
// Use toBuilder() to copy all fields and then modify the file
ConfigFile updateRequest = created.toBuilder()
        .setFile(ByteString.copyFromUtf8("Modified content"))
        .build();

// Put the modified object to the server
ConfigFile modified = session.putOne(updateRequest);

// Verify that the object contains the new data
System.out.println("Content: " + created.getFile().toStringUtf8());
    ]]></programlisting>
        </example>
    </para>

    <para>
        Finally, we delete our object:
        <example>
            <title>Deleting a ConfigFile</title>
            <programlisting language="java"><![CDATA[
// Delete the ConfigFile, returns the ConfigFile's state right before it was deleted
ConfigFile deleted = session.deleteOne(modified);
    ]]></programlisting>
        </example>
    </para>
</section>