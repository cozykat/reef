<section id="client_setup">
    <title>Client Setup</title>
    <para>Setting-up the client involves establishing a connection and acquiring a session. All services require user
        authorization except for the authorization service itself.
    </para>
    <section>
        <title>Connecting to AMQP Broker</title>
        <para>
            The first step to opening a connection is provide the necessary configuration information.
            <literal>BrokerConnectionInfo</literal>
            contains all the necessary fields:
            <itemizedlist>
                <listitem>IP Address</listitem>
                <listitem>Port</listitem>
                <listitem>User name</listitem>
                <listitem>Password</listitem>
                <listitem>Virtual Host</listitem>
            </itemizedlist>
        </para>
        <para>
            Next, we create the connection manager. This involves the connection info, a default client timeout, and a
            <literal>ReefServicesList</literal>
            instance, which provides the bindings between service types and AMQP
            exchanges. The connect call will either connect successfully with the broker or a
            <literal>ServiceIOException</literal>
            will be thrown when the timeout expires.
            <example>
                <title>Using IConnection</title>
                <programlisting language="java"><![CDATA[
BrokerConnectionInfo info = new BrokerConnectionInfo("127.0.0.1", 5672, "user", "password", "test");
IConnection connection = new Connection(info, ReefServicesList.getInstance(), 5000);
connection.connect(5000);
                ]]></programlisting>
            </example>
        </para>
    </section>
    <section>
        <title>Connection Listener</title>
        <para>
            During operation it is possible that the connection to the AMQP broker may be lost and its important for
            client applications to handle this case. Clients should implement the
            <literal>IConnectionListener</literal>
            interface
            and notify the application when an unexpected
            <literal>closed()</literal>
            callback occurs. The connection
            manager will issue the callbacks on a separate thread; clients need to provide the necessary synchronization
            to maintain thread safety and not block the thread.
        </para>
        <example>
            <title>Trivial IConnectionListener example</title>
            <programlisting language="java"><![CDATA[
IConnectionListener myListener = new IConnectionListener() {
    public void opened() {
        System.out.println("Connection opened!");
    }
    public void closed() {
        System.out.println("Connection closed!");
    }
};
connection.addConnectionListener(myListener);
connection.connect(5000);
// console -> "Connection opened!"
connection.disconnect(5000);
// console -> "Connection closed!"
                ]]></programlisting>
        </example>

    </section>
    <section>
        <title>Getting an ISession</title>
        <para>
            Once we have a working connection we can create<literal>ISession</literal>s to query the reef services.
            Unlike<literal>IConnection</literal>,
            <literal>ISession</literal>
            is not designed to be thread safe and
            must be used on a single thread. When we are done with the
            <literal>ISession</literal>
            we need to call
            <literal>close()</literal>.
        </para>
        <example>
            <title>ISession Example</title>
            <programlisting language="java"><![CDATA[
ISession session = connection.newSession();
// do work with session
session.close().
                ]]></programlisting>
        </example>
    </section>

    <section>
        <title>Client Authorization</title>
        <para>
            Most service requests require user authorization. Clients identify their credentials by including
            an
            <literal>AuthToken</literal>
            in the header of service requests. As with most request
            header-related details, the
            <literal>ISession</literal>
            will handle attaching this token to service calls. However, the user must first use the
            <literal>AuthToken</literal>
            service to register itself and obtain its credentials. This
            username and password combination will probably be different than the ones used to connect to the
            broker.
        </para>
        <para>
            The first step to opening a connection is provide the necessary configuration information.
            <literal>BrokerConnectionInfo</literal>
            contains all the necessary fields:
            <itemizedlist>
                <listitem>Build an
                    <literal>AuthToken</literal>
                    request, providing a username and password for the Reef system.
                </listitem>
                <listitem>Put the
                    <literal>AuthToken</literal>
                    to the service and extract token from the response.
                </listitem>
                <listitem>Attach the token to the<literal>ISession</literal>. It will be included in subsequent
                    requests.
                </listitem>
            </itemizedlist>
        </para>
        <example>
            <title>AuthToken Acquisition</title>
            <programlisting language="java"><![CDATA[
import org.totalgrid.reef.proto.Auth.*;

(...)

Agent agent = Agent.newBuilder()
        .setName("user")
        .setPassword("pass")
        .build();

AuthToken login = AuthToken.newBuilder()
        .setAgent(agent)
        .build();

AuthToken response = session.putOne(login);
session.getDefaultEnv().setAuthToken(response.getToken());
// all future calls with this session will carry this auth token
                ]]></programlisting>
        </example>
    </section>
</section>